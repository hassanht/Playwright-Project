import { debounce as _debounce } from 'lodash/debounce';
export function debounce(interval) {
    if (interval === void 0) { interval = 200; }
    return function (target, propertyKey, descriptor) {
        var method = descriptor.value;
        if (typeof method !== 'function') {
            throw new Error("@debounce decorator can only be applied to methods not: " + typeof method);
        }
        return {
            configurable: descriptor.configurable,
            enumerable: descriptor.enumerable,
            get: function () {
                return _debounce(method.bind(this), interval);
            }
        };
        // const _debouncedKey = `_@debounce#${propertyKey}`;
        // return {
        //   configurable: descriptor.configurable,
        //   enumerable: descriptor.enumerable,
        //   get() {
        //     if (!this.hasOwnProperty(_debouncedKey)) {
        //       const debounced = _debounce(method.bind(this), interval);
        //       Object.defineProperty(this, _debouncedKey, {
        //         configurable: true,
        //         writable: true,
        //         value: debounced,
        //         enumerable: false
        //       });
        //     }
        //     return this[_debouncedKey];
        //   }
        // };
    };
}
//# sourceMappingURL=debounce.js.map