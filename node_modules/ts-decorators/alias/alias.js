/**
 * @name autobind
 * @type {function}
 * @param target
 * @param propertyKey
 * @param descriptor
 * @returns {any}
 * @description Method decorator that binds it to the instance of the class it is defined on
 */
/**
 * @name autobind
 * @type {function}
 * @param target
 * @param propertyKey
 * @param descriptor
 * @returns {any}
 * @description Method decorator that binds it to the instance of the class it is defined on
 */ export function alias() {
    var aliases = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        aliases[_i] = arguments[_i];
    }
    return function (target, propertyKey, descriptor) {
        var method = descriptor.value;
        if (typeof method !== 'function') {
            throw new Error("@alias decorator can only be applied to methods not: " + typeof method);
        }
        return {
            configurable: descriptor.configurable,
            enumerable: descriptor.enumerable,
            get: function () {
                var _this = this;
                aliases.forEach(function (alias) {
                    if (!_this.hasOwnProperty(alias)) {
                        Object.defineProperty(_this, alias, {
                            configurable: true,
                            writable: true,
                            value: method,
                            enumerable: true
                        });
                    }
                });
                return method;
            }
        };
    };
}
//# sourceMappingURL=alias.js.map