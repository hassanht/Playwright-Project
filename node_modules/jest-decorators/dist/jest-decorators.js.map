{"version":3,"sources":["jest-decorators.ts"],"names":[],"mappings":"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","file":"jest-decorators.js","sourcesContent":["// This module is dependent with jest\n\nexport type ClassType<T=any> = new(...args: any[]) => T\n\nclass TestSuite {\n  private description: string\n  private instance: InstanceType<ClassType>\n  private tests: Array<[string, PropertyKey]> = []\n  private beforeEach: Array<PropertyKey> = []\n  private afterEach: Array<PropertyKey> = []\n  private beforeAll: Array<PropertyKey> = []\n  private afterAll: Array<PropertyKey> = []\n\n  constructor(private classType: ClassType) {\n    this.instance = new classType()\n  }\n\n  public getClassType(): ClassType {\n    return this.classType\n  }\n\n  public setDescription(description: string) {\n    this.description = description\n  }\n\n  public addTest(description: string, methodName: PropertyKey) {\n    this.tests.push([description, methodName])\n  }\n\n  public addBeforeEach(methodName: PropertyKey) {\n    this.beforeEach.push(methodName)\n  }\n\n  public addAfterEach(methodName: PropertyKey) {\n    this.afterEach.push(methodName)\n  }\n\n  public addBeforeAll(methodName: PropertyKey) {\n    this.beforeAll.push(methodName)\n  }\n\n  public addAfterAll(methodName: PropertyKey) {\n    this.afterAll.push(methodName)\n  }\n\n  public exec() {\n    describe(this.description, () => {\n      // if (this.beforeAll !== undefined) {\n      //   beforeAll(this.instance[this.beforeAll].bind(this.instance))\n      // }\n      // if (this.afterAll !== undefined) {\n      //   afterAll(this.instance[this.afterAll].bind(this.instance))\n      // }\n      // if (this.beforeEach !== undefined) {\n      //   beforeEach(this.instance[this.beforeEach].bind(this.instance))\n      // }\n      // if (this.afterEach !== undefined) {\n      //   afterEach(this.instance[this.afterEach].bind(this.instance))\n      // }\n      for (let cb of this.beforeAll) {\n        beforeAll(this.instance[cb].bind(this.instance))\n      }\n      for (let cb of this.afterAll) {\n        afterAll(this.instance[cb].bind(this.instance))\n      }\n      for (let cb of this.beforeEach) {\n        beforeEach(this.instance[cb].bind(this.instance))\n      }\n      for (let cb of this.afterEach) {\n        afterEach(this.instance[cb].bind(this.instance))\n      }\n      for (let [description, methodName] of this.tests) {\n        test(description, this.instance[methodName].bind(this.instance))\n      }\n    })\n  }\n}\n\nexport class TestContainer extends Map<ClassType, TestSuite> {\n  private static instance: TestContainer\n\n  public static getInstance(): TestContainer {\n    if (TestContainer.instance === undefined) {\n       TestContainer.instance = new TestContainer()\n    }\n    return TestContainer.instance\n  }\n\n  public static run() {\n    for (let [classType, suite] of TestContainer.getInstance().entries()) {\n      suite.exec()\n    }\n  }\n\n  public setIfNotExists(classType: ClassType): this {\n    if (!this.has(classType)) {\n      this.set(classType, new TestSuite(classType))\n    }\n    return this\n  }\n}\n\nexport function Suite<T extends ClassType>(target: T): T {\n  TestContainer.getInstance().setIfNotExists(target).get(target).setDescription(target.name)\n  return target\n}\n\nexport function Test(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\n  TestContainer.getInstance().setIfNotExists(target.constructor as ClassType).get(target.constructor as ClassType).addTest(propertyKey, propertyKey)\n}\n\nexport function Setup(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\n  TestContainer.getInstance().setIfNotExists(target.constructor as ClassType).get(target.constructor as ClassType).addBeforeEach(propertyKey)\n}\n\nexport function Teardown(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\n  TestContainer.getInstance().setIfNotExists(target.constructor as ClassType).get(target.constructor as ClassType).addAfterEach(propertyKey)\n}\n\nexport function SuiteSetup(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\n  TestContainer.getInstance().setIfNotExists(target.constructor as ClassType).get(target.constructor as ClassType).addBeforeAll(propertyKey)\n}\n\nexport function SuiteTeardown(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\n  TestContainer.getInstance().setIfNotExists(target.constructor as ClassType).get(target.constructor as ClassType).addAfterAll(propertyKey)\n}\n"]}